#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build X86(64bit) OpenWrt

on:
  repository_dispatch:
  release:
    types: published
  push:
    branches:
      - main
    paths:
      - 'config/x86_64.config'
  schedule:
    - cron: 0 4 * * 5
#  watch:
#    types: started

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config/x86_64.config
  DIY_P1_SH: scripts/diy-part1.sh
  DIY_P2_SH: scripts/diy-part2.sh
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: true
  UPLOAD_WETRANSFER: true
  TZ: Asia/Shanghai
  SEND_WECHAT_MSG: true

jobs:
  build:
    runs-on: ubuntu-18.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
        
    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        
    - name: SSH connection to Actions
      uses: P3TERX/debugger-action@main
      if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "::set-env name=DEVICE_NAME::_$(cat DEVICE_NAME)"
        echo "::set-env name=FILE_DATE::_$(date +"%Y%m%d%H%M")"
        
    - name: 检查空间使用情况
      run: |
        echo "======================="
        echo "Space usage:"
        echo "======================="
        df -hT
        echo "======================="
        du -h --max-depth=1 openwrt/ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 openwrt/build_dir
        du -h --max-depth=1 openwrt/bin

    - name: 整理文件
      run: |
        mkdir -p ./artifact/firmware
        mkdir -p ./artifact/vmware
        mkdir -p ./artifact/package
        mkdir -p ./artifact/buildinfo
        rm -rf $(find openwrt/bin/targets/ -type d -name "packages")
        cp -rf $(find openwrt/bin/packages/ -type f -name "*.ipk") ./artifact/package/
        cp -rf $(find openwrt/bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
        cp -rf $(find openwrt/bin/targets/ -type f -name "*combined*img*") ./artifact/firmware/
        cp -rf $(find openwrt/bin/targets/ -type f -name "*combined*vmdk*") ./artifact/vmware/
    - name: 上传固件
      uses: actions/upload-artifact@v2
      with:
        name: OpenWrt-firmware-Lean-${{ env.FILE_DATE }}
        path: ./artifact/firmware/

    - name: 上传vmware镜像
      uses: actions/upload-artifact@v2
      with:
        name: OpenWrt-vmware-Lean-${{ env.FILE_DATE }}
        path: ./artifact/vmware/

    - name: 上传插件包
      uses: actions/upload-artifact@v2
      with:
        name: OpenWrt-package-Lean-${{ env.FILE_DATE }}
        path: ./artifact/package/

    - name: 上传固件信息
      uses: actions/upload-artifact@v2
      with:
        name: OpenWrt-buildinfo-Lean-${{ env.FILE_DATE }}
        path: ./artifact/buildinfo/

    - name: 上传固件到「奶牛快传」和「wetransfer」
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
    
    - name: 提取发布用的「奶牛快传」跟「WeTransfer」的链接
      if: steps.organizer.outputs.status == 'success' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::set-env name=COWTRANSFER_URL::$(cat cowtransfer.log | grep https | cut -f3 -d" ")" 
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::set-env name=WETRANSFER_URL::$(cat wetransfer.log | grep https | cut -f3 -d" ")"    
    
    - name: 自动发布固件
      uses: softprops/action-gh-release@v1
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        name: ${{ env.date1 }} 「 ${{ env.WXFB_MESSAGE }} 」固件
        tag_name: ${{ env.date2 }}
        body: |            
            ☆  源码 : ${{ env.REPO_URL }}
            ☆  分支 : ${{ env.REPO_BRANCH }}
            ☆  感谢源码作者无私分享！
            
            🎉 [ ${{matrix.target}} ]固件下载 ✨
            
            💐 奶牛快传(国内高速🚀下载)： ${{ env.COWTRANSFER_URL }}
            
            ⛄ WeTransfer(国外高速🚀下载)： ${{ env.WETRANSFER_URL }}
            
            🌴 链接有效期为7天，无需注册直接下载 🐤
        files: ${{ env.FIRMWARE }}/*

    - name: 微信通知
      if: steps.organizer.outputs.status == 'success' && env.SERVERCHAN_SCKEY == 'true'
      uses: emon100/Action-Serverchan@master
      with:
        SCKEY: ${{ secrets.SCKEY }}
        text: 恭喜主人${{matrix.target}}固件编译成功！
        desp: 我亲爱的主人您要编译的${{ env.WXFB_MESSAGE }}固件成功完成了！
              
              
              完成时间：${{ env.date1 }}
              
              
              发布地址：${{ env.GITHUB_RELEASE }}
              
              
              奶牛快传：${{ env.COWTRANSFER_URL }}
              
              
              WeTransfer：${{ env.WETRANSFER_URL }}
              
              
              祝小主人见人爱，花见花开，车见车载，天天好心情🎈！！！
