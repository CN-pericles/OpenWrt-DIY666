#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build X86(64bit) OpenWrt

on:
  repository_dispatch:
  release:
    types: published
  push:
    branches:
      - main
    paths:
      - 'config/x86_64.config'
  schedule:
    - cron: 0 18 * * *
#  watch:
#    types: started

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config/x86_64.config
  DIY_P1_SH: scripts/diy-part1.sh
  DIY_P2_SH: scripts/diy-part2.sh
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: true
  UPLOAD_WETRANSFER: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-18.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
        
    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        
    - name: SSH connection to Actions
      uses: P3TERX/debugger-action@main
      if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "::set-env name=DEVICE_NAME::_$(cat DEVICE_NAME)"
        echo "::set-env name=FILE_DATE::_$(date +"%Y%m%d%H%M")"
        
    - name: Check space usage
      if: (!cancelled())
      run: df -hT
    - name: Upload Config
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: config.buildinfo
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/config.buildinfo
        
    - name: Upload Packages-Server
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: packages-server
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/pre-packages-server
        
    - name: Upload Packages Info
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}.manifest
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}.manifest
        
    - name: Upload Kernel Packages
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: kernel-packages
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/packages/
        
    - name: Upload RootFS Archive
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-generic-rootfs.tar.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-rootfs.tar.gz

    - name: Upload Combined DVD Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-combined.img
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-combined.img
        
    - name: Upload Combined VirtualBox Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-combined.vdi
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-combined.vdi
        
    - name: Upload Combined VMware Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-combined.vmdk
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-combined.vmdk

    - name: Upload GPT DVD Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-combined-efi.img
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-combined-efi.img
        
    - name: Upload GPT VirtualBox Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-combined-efi.vdi
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-combined-efi.vdi
        
    - name: Upload GPT VMware Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-combined-efi.vmdk
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-combined-efi.vmdk

    - name: Upload Images Sha256sums
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: sha256sums
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/sha256sums

    - name: Organize Files
      id: organize
      if: steps.generate.outputs.status == 'success' && !cancelled()
      run: |
        cd $OPENWRTROOT
        zip -qr DL.zip dl
        cd $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET
        rm -rf packages pre-packages-server
        tree -L 1
        gzip *.img
        cd $OPENWRTROOT/bin/targets/$TARGET/
        mkdir -p uefi-images
        mkdir -p legacy-images
        mkdir -p other-files
        mv $SUBTARGET/*combined-efi* uefi-images
        mv $SUBTARGET/*combined* legacy-images
        mv $SUBTARGET/* other-files
        curl -fsSL git.io/file-transfer | sh
        df -hT $PWD
        echo "::set-output name=status::success"
    - name: Upload Uefi Firmwares To Cowtransfer
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true'
      run: |
        cd $OPENWRTROOT/bin/targets/$TARGET
        ./transfer cow --block 2621440 -s -p 64 --no-progress ./uefi-images 2>&1 | tee cowtransfer-uefi.log
        echo "::warning file=Cowtransfer-UEFI=::$(cat cowtransfer-uefi.log | grep https)"
        
    - name: Upload Legacy Firmwares To Cowtransfer
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true'
      run: |
        cd $OPENWRTROOT/bin/targets/$TARGET/
        ./transfer cow --block 2621440 -s -p 64 --no-progress ./legacy-images 2>&1 | tee cowtransfer-legacy.log
        echo "::warning file=Cowtransfer-Legacy=::$(cat cowtransfer-legacy.log | grep https)"
        
    - name: Upload Other Files To Cowtransfer
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true'
      run: |
        cd $OPENWRTROOT/bin/targets/$TARGET/
        ./transfer cow --block 2621440 -s -p 64 --no-progress ./other-files 2>&1 | tee cowtransfer-other.log
        echo "::warning file=Cowtransfer-OtherFiles=::$(cat cowtransfer-other.log | grep https)"
        
    - name: Upload Uefi Firmwares To WeTransfer
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true'
      run: |
        cd $OPENWRTROOT/bin/targets/$TARGET
        ./transfer wet -s -p 16 --no-progress ./uefi-images 2>&1 | tee wetransfer-uefi.log
        echo "::warning file=Wetransfer-UEFI=::$(cat wetransfer-uefi.log | grep https)"
        
    - name: Upload Legacy Firmwares To WeTransfer
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true'
      run: |
        cd $OPENWRTROOT/bin/targets/$TARGET/
        ./transfer wet -s -p 16 --no-progress ./legacy-images 2>&1 | tee wetransfer-legacy.log
        echo "::warning file=Wetransfer-Legacy::$(cat wetransfer-legacy.log | grep https)"
        
    - name: Upload Other Files To WeTransfer
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true'
      run: |
        cd $OPENWRTROOT/bin/targets/$TARGET/
        ./transfer wet -s -p 16 --no-progress ./other-files 2>&1 | tee wetransfer-other.log
        echo "::warning file=Wetransfer-OtherFiles::$(cat wetransfer-other.log | grep https)"
        
    - name: Upload DL To CowTransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        cd $OPENWRTROOT/bin/targets/$TARGET/
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${OPENWRTROOT}/DL.zip 2>&1 | tee cowtransfer-dl.log
        
    - name: Upload DL To WeTransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        cd $OPENWRTROOT/bin/targets/$TARGET/
        ./transfer wet -s -p 16 --no-progress ${OPENWRTROOT}/DL.zip 2>&1 | tee wetransfer-dl.log
